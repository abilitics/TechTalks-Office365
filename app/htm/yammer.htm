<html ng-app="myApp">
	
	<style>
		 html { background-color:#eaeaea; }
		 .box { margin:20px;padding:10px;background-color:white;color:#767676; }
	</style>
	
	<script type="text/javascript" src="https://code.angularjs.org/1.4.7/angular.min.js"></script>
	<script type="text/javascript" data-app-id="<app_id>" src="https://c64.assets-yammer.com/assets/platform_js_sdk.js"></script>
  
	<script>
			function humanized_time_span(date, ref_date, date_formats, time_units) {
			  //Date Formats must be be ordered smallest -> largest and must end in a format with ceiling of null
			  date_formats = date_formats || {
				past: [
				  { ceiling: 60, text: "$seconds seconds ago" },
				  { ceiling: 3600, text: "$minutes minutes ago" },
				  { ceiling: 86400, text: "$hours hours ago" },
				  { ceiling: 2629744, text: "$days days ago" },
				  { ceiling: 31556926, text: "$months months ago" },
				  { ceiling: null, text: "$years years ago" }      
				],
				future: [
				  { ceiling: 60, text: "in $seconds seconds" },
				  { ceiling: 3600, text: "in $minutes minutes" },
				  { ceiling: 86400, text: "in $hours hours" },
				  { ceiling: 2629744, text: "in $days days" },
				  { ceiling: 31556926, text: "in $months months" },
				  { ceiling: null, text: "in $years years" }
				]
			  };
			  //Time units must be be ordered largest -> smallest
			  time_units = time_units || [
				[31556926, 'years'],
				[2629744, 'months'],
				[86400, 'days'],
				[3600, 'hours'],
				[60, 'minutes'],
				[1, 'seconds']
			  ];
			  
			  date = new Date(date);
			  ref_date = ref_date ? new Date(ref_date) : new Date();
			  var seconds_difference = (ref_date - date) / 1000;
			  
			  var tense = 'past';
			  if (seconds_difference < 0) {
				tense = 'future';
				seconds_difference = 0-seconds_difference;
			  }
			  
			  function get_format() {
				for (var i=0; i<date_formats[tense].length; i++) {
				  if (date_formats[tense][i].ceiling == null || seconds_difference <= date_formats[tense][i].ceiling) {
					return date_formats[tense][i];
				  }
				}
				return null;
			  }
			  
			  function get_time_breakdown() {
				var seconds = seconds_difference;
				var breakdown = {};
				for(var i=0; i<time_units.length; i++) {
				  var occurences_of_unit = Math.floor(seconds / time_units[i][0]);
				  seconds = seconds - (time_units[i][0] * occurences_of_unit);
				  breakdown[time_units[i][1]] = occurences_of_unit;
				}
				return breakdown;
			  }

			  function render_date(date_format) {
				var breakdown = get_time_breakdown();
				var time_ago_text = date_format.text.replace(/\$(\w+)/g, function() {
				  return breakdown[arguments[1]];
				});
				return depluralize_time_ago_text(time_ago_text, breakdown);
			  }
			  
			  function depluralize_time_ago_text(time_ago_text, breakdown) {
				for(var i in breakdown) {
				  if (breakdown[i] == 1) {
					var regexp = new RegExp("\\b"+i+"\\b");
					time_ago_text = time_ago_text.replace(regexp, function() {
					  return arguments[0].replace(/s\b/g, '');
					});
				  }
				}
				return time_ago_text;
			  }
					  
			  return render_date(get_format());
			}
	</script>
  
	<div ng-controller="JsTalks">
        <span ng-if="!isLoggedIn" id="yammer-login"></span>
		<button ng-if="isLoggedIn" ng-click="logout()">Logout</button>
	
        <br/>
        

		<pre>{{data}}</pre>
		
		<textarea ng-model="postMessage"></textarea>
		<button ng-click="createPost()">Create Post</button>
		
		<div ng-repeat="message in messages" class="box">
			<div><b>{{message.body.rich}}</b></div>
			<div>by {{message.sender_name}} | {{message.date}}</div>
		</div>
		
	</div>
    
    <script type="text/javascript"> 
      
	  angular.module('myApp',[])
	  
	  .controller('JsTalks', ['$http', "$scope", function($http, $scope) {

		yam.connect.loginButton('#yammer-login', function (resp) {
		    if (resp.authResponse) {

		        $scope.isLoggedIn = true;

		        yam.platform.request({
		            url: "messages/in_group/6139466.json?limit=10&threaded%3D[true%20%7C%20extended]=true",
		            method: "GET",
		            success: function (data) {
		                postProcessMessages(data);
		                $scope.messages = data.messages.filter(function (m) { return !m.replied_to_id; });
		                //$scope.data = JSON.stringify(data, "", 2);
		                $scope.$apply();
		            },
		            error: function (user) {
		                console.log("problem!");
		            }
		        });

		        //localStorage.setItem("jstalks_yammer", resp.access_token.token);
		        //window.location.reload();
		    }
		});
		
		$scope.createPost = function() {
			
			var body = $scope.postMessage;
			
			yam.platform.request({
		            url: "messages.json?group_id=6139466&body=" + body,  
		            method: "POST",
		            success: function (data) {
						postProcessMessages(data);
						var newMessage = data.messages[0];
						$scope.postMessage = "";
						$scope.messages.unshift(newMessage);
						$scope.$apply();
					}
			});			
			
		};
		
		function postProcessMessages(data) {
			angular.forEach(data.messages, function(value, key) {

				var sender = data.references.filter(function(ref) {
					return ref.id === value.sender_id;
				})[0];
				
				value.sender_name = sender.full_name;
				value.date = humanized_time_span(value.created_at);
			});
		};
		
		$scope.logout = function () {
		    yam.platform.logout();
		    $scope.messages = [];
		    $scope.isLoggedIn = false;
		    setTimeout(function () {

		        window.location.reload();

		    }, 1000);
		    
		}
	}]);
    </script> 

</html>